// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  board: (where?: BoardWhereInput) => Promise<boolean>;
  card: (where?: CardWhereInput) => Promise<boolean>;
  column: (where?: ColumnWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  board: (where: BoardWhereUniqueInput) => BoardPromise;
  boards: (
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Board>;
  boardsConnection: (
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BoardConnectionPromise;
  card: (where: CardWhereUniqueInput) => CardPromise;
  cards: (
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Card>;
  cardsConnection: (
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CardConnectionPromise;
  column: (where: ColumnWhereUniqueInput) => ColumnPromise;
  columns: (
    args?: {
      where?: ColumnWhereInput;
      orderBy?: ColumnOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Column>;
  columnsConnection: (
    args?: {
      where?: ColumnWhereInput;
      orderBy?: ColumnOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ColumnConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoard: (data: BoardCreateInput) => BoardPromise;
  updateBoard: (
    args: { data: BoardUpdateInput; where: BoardWhereUniqueInput }
  ) => BoardPromise;
  updateManyBoards: (
    args: { data: BoardUpdateManyMutationInput; where?: BoardWhereInput }
  ) => BatchPayloadPromise;
  upsertBoard: (
    args: {
      where: BoardWhereUniqueInput;
      create: BoardCreateInput;
      update: BoardUpdateInput;
    }
  ) => BoardPromise;
  deleteBoard: (where: BoardWhereUniqueInput) => BoardPromise;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayloadPromise;
  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (
    args: { data: CardUpdateInput; where: CardWhereUniqueInput }
  ) => CardPromise;
  updateManyCards: (
    args: { data: CardUpdateManyMutationInput; where?: CardWhereInput }
  ) => BatchPayloadPromise;
  upsertCard: (
    args: {
      where: CardWhereUniqueInput;
      create: CardCreateInput;
      update: CardUpdateInput;
    }
  ) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createColumn: (data: ColumnCreateInput) => ColumnPromise;
  updateColumn: (
    args: { data: ColumnUpdateInput; where: ColumnWhereUniqueInput }
  ) => ColumnPromise;
  updateManyColumns: (
    args: { data: ColumnUpdateManyMutationInput; where?: ColumnWhereInput }
  ) => BatchPayloadPromise;
  upsertColumn: (
    args: {
      where: ColumnWhereUniqueInput;
      create: ColumnCreateInput;
      update: ColumnUpdateInput;
    }
  ) => ColumnPromise;
  deleteColumn: (where: ColumnWhereUniqueInput) => ColumnPromise;
  deleteManyColumns: (where?: ColumnWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  column: (
    where?: ColumnSubscriptionWhereInput
  ) => ColumnSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ColumnOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "color_ASC"
  | "color_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CardUpdateManyDataInput {
  name?: String;
  color?: String;
}

export type BoardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ColumnUpdateManyDataInput {
  name?: String;
}

export interface CardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  column?: ColumnWhereInput;
  color?: String;
  color_not?: String;
  color_in?: String[] | String;
  color_not_in?: String[] | String;
  color_lt?: String;
  color_lte?: String;
  color_gt?: String;
  color_gte?: String;
  color_contains?: String;
  color_not_contains?: String;
  color_starts_with?: String;
  color_not_starts_with?: String;
  color_ends_with?: String;
  color_not_ends_with?: String;
  AND?: CardWhereInput[] | CardWhereInput;
  OR?: CardWhereInput[] | CardWhereInput;
  NOT?: CardWhereInput[] | CardWhereInput;
}

export interface BoardUpdateInput {
  name?: String;
  columns?: ColumnUpdateManyWithoutBoardInput;
  user?: UserUpdateOneRequiredWithoutBoardsInput;
}

export interface BoardUpsertWithoutColumnsInput {
  update: BoardUpdateWithoutColumnsDataInput;
  create: BoardCreateWithoutColumnsInput;
}

export interface ColumnUpdateManyWithoutBoardInput {
  create?: ColumnCreateWithoutBoardInput[] | ColumnCreateWithoutBoardInput;
  delete?: ColumnWhereUniqueInput[] | ColumnWhereUniqueInput;
  connect?: ColumnWhereUniqueInput[] | ColumnWhereUniqueInput;
  set?: ColumnWhereUniqueInput[] | ColumnWhereUniqueInput;
  disconnect?: ColumnWhereUniqueInput[] | ColumnWhereUniqueInput;
  update?:
    | ColumnUpdateWithWhereUniqueWithoutBoardInput[]
    | ColumnUpdateWithWhereUniqueWithoutBoardInput;
  upsert?:
    | ColumnUpsertWithWhereUniqueWithoutBoardInput[]
    | ColumnUpsertWithWhereUniqueWithoutBoardInput;
  deleteMany?: ColumnScalarWhereInput[] | ColumnScalarWhereInput;
  updateMany?:
    | ColumnUpdateManyWithWhereNestedInput[]
    | ColumnUpdateManyWithWhereNestedInput;
}

export interface UserUpdateOneRequiredWithoutBoardsInput {
  create?: UserCreateWithoutBoardsInput;
  update?: UserUpdateWithoutBoardsDataInput;
  upsert?: UserUpsertWithoutBoardsInput;
  connect?: UserWhereUniqueInput;
}

export interface ColumnUpdateWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput;
  data: ColumnUpdateWithoutBoardDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ColumnUpdateWithoutBoardDataInput {
  name?: String;
  cards?: CardUpdateManyWithoutColumnInput;
}

export interface ColumnWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  board?: BoardWhereInput;
  cards_every?: CardWhereInput;
  cards_some?: CardWhereInput;
  cards_none?: CardWhereInput;
  AND?: ColumnWhereInput[] | ColumnWhereInput;
  OR?: ColumnWhereInput[] | ColumnWhereInput;
  NOT?: ColumnWhereInput[] | ColumnWhereInput;
}

export interface CardUpdateManyWithoutColumnInput {
  create?: CardCreateWithoutColumnInput[] | CardCreateWithoutColumnInput;
  delete?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  connect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  set?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  disconnect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
  update?:
    | CardUpdateWithWhereUniqueWithoutColumnInput[]
    | CardUpdateWithWhereUniqueWithoutColumnInput;
  upsert?:
    | CardUpsertWithWhereUniqueWithoutColumnInput[]
    | CardUpsertWithWhereUniqueWithoutColumnInput;
  deleteMany?: CardScalarWhereInput[] | CardScalarWhereInput;
  updateMany?:
    | CardUpdateManyWithWhereNestedInput[]
    | CardUpdateManyWithWhereNestedInput;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BoardWhereInput;
  AND?: BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput;
  OR?: BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput;
  NOT?: BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput;
}

export interface CardUpdateWithWhereUniqueWithoutColumnInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutColumnDataInput;
}

export interface BoardUpdateManyDataInput {
  name?: String;
}

export interface CardUpdateWithoutColumnDataInput {
  name?: String;
  color?: String;
}

export type CardWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CardUpsertWithWhereUniqueWithoutColumnInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutColumnDataInput;
  create: CardCreateWithoutColumnInput;
}

export interface BoardUpsertWithWhereUniqueWithoutUserInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutUserDataInput;
  create: BoardCreateWithoutUserInput;
}

export interface CardScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  color?: String;
  color_not?: String;
  color_in?: String[] | String;
  color_not_in?: String[] | String;
  color_lt?: String;
  color_lte?: String;
  color_gt?: String;
  color_gte?: String;
  color_contains?: String;
  color_not_contains?: String;
  color_starts_with?: String;
  color_not_starts_with?: String;
  color_ends_with?: String;
  color_not_ends_with?: String;
  AND?: CardScalarWhereInput[] | CardScalarWhereInput;
  OR?: CardScalarWhereInput[] | CardScalarWhereInput;
  NOT?: CardScalarWhereInput[] | CardScalarWhereInput;
}

export type ColumnWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput;
  data: CardUpdateManyDataInput;
}

export interface BoardUpdateManyWithoutUserInput {
  create?: BoardCreateWithoutUserInput[] | BoardCreateWithoutUserInput;
  delete?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  connect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  set?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  disconnect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
  update?:
    | BoardUpdateWithWhereUniqueWithoutUserInput[]
    | BoardUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | BoardUpsertWithWhereUniqueWithoutUserInput[]
    | BoardUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: BoardScalarWhereInput[] | BoardScalarWhereInput;
  updateMany?:
    | BoardUpdateManyWithWhereNestedInput[]
    | BoardUpdateManyWithWhereNestedInput;
}

export interface ColumnUpdateInput {
  name?: String;
  board?: BoardUpdateOneRequiredWithoutColumnsInput;
  cards?: CardUpdateManyWithoutColumnInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  username?: String;
}>;

export interface ColumnUpsertWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput;
  update: ColumnUpdateWithoutBoardDataInput;
  create: ColumnCreateWithoutBoardInput;
}

export interface BoardCreateManyWithoutUserInput {
  create?: BoardCreateWithoutUserInput[] | BoardCreateWithoutUserInput;
  connect?: BoardWhereUniqueInput[] | BoardWhereUniqueInput;
}

export interface ColumnScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ColumnScalarWhereInput[] | ColumnScalarWhereInput;
  OR?: ColumnScalarWhereInput[] | ColumnScalarWhereInput;
  NOT?: ColumnScalarWhereInput[] | ColumnScalarWhereInput;
}

export interface ColumnUpdateManyMutationInput {
  name?: String;
}

export interface ColumnUpdateManyWithWhereNestedInput {
  where: ColumnScalarWhereInput;
  data: ColumnUpdateManyDataInput;
}

export interface BoardCreateInput {
  name: String;
  columns?: ColumnCreateManyWithoutBoardInput;
  user: UserCreateOneWithoutBoardsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  boards_every?: BoardWhereInput;
  boards_some?: BoardWhereInput;
  boards_none?: BoardWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ColumnCreateWithoutBoardInput {
  name: String;
  cards?: CardCreateManyWithoutColumnInput;
}

export interface ColumnCreateInput {
  name: String;
  board: BoardCreateOneWithoutColumnsInput;
  cards?: CardCreateManyWithoutColumnInput;
}

export interface CardCreateWithoutColumnInput {
  name: String;
  color?: String;
}

export interface UserUpdateWithoutBoardsDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  username?: String;
  password?: String;
}

export interface UserCreateWithoutBoardsInput {
  firstName: String;
  lastName: String;
  email: String;
  username: String;
  password: String;
}

export interface UserUpsertWithoutBoardsInput {
  update: UserUpdateWithoutBoardsDataInput;
  create: UserCreateWithoutBoardsInput;
}

export interface ColumnSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ColumnWhereInput;
  AND?: ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput;
  OR?: ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput;
  NOT?: ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput;
}

export interface BoardUpdateManyMutationInput {
  name?: String;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  username?: String;
  password?: String;
}

export interface CardUpdateManyMutationInput {
  name?: String;
  color?: String;
}

export interface BoardScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: BoardScalarWhereInput[] | BoardScalarWhereInput;
  OR?: BoardScalarWhereInput[] | BoardScalarWhereInput;
  NOT?: BoardScalarWhereInput[] | BoardScalarWhereInput;
}

export interface ColumnUpsertWithoutCardsInput {
  update: ColumnUpdateWithoutCardsDataInput;
  create: ColumnCreateWithoutCardsInput;
}

export interface BoardUpdateWithWhereUniqueWithoutUserInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutUserDataInput;
}

export interface CardCreateInput {
  name: String;
  column: ColumnCreateOneWithoutCardsInput;
  color?: String;
}

export interface BoardCreateWithoutUserInput {
  name: String;
  columns?: ColumnCreateManyWithoutBoardInput;
}

export interface ColumnCreateOneWithoutCardsInput {
  create?: ColumnCreateWithoutCardsInput;
  connect?: ColumnWhereUniqueInput;
}

export interface CardCreateManyWithoutColumnInput {
  create?: CardCreateWithoutColumnInput[] | CardCreateWithoutColumnInput;
  connect?: CardWhereUniqueInput[] | CardWhereUniqueInput;
}

export interface ColumnCreateWithoutCardsInput {
  name: String;
  board: BoardCreateOneWithoutColumnsInput;
}

export interface BoardWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  columns_every?: ColumnWhereInput;
  columns_some?: ColumnWhereInput;
  columns_none?: ColumnWhereInput;
  user?: UserWhereInput;
  AND?: BoardWhereInput[] | BoardWhereInput;
  OR?: BoardWhereInput[] | BoardWhereInput;
  NOT?: BoardWhereInput[] | BoardWhereInput;
}

export interface BoardCreateOneWithoutColumnsInput {
  create?: BoardCreateWithoutColumnsInput;
  connect?: BoardWhereUniqueInput;
}

export interface BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput;
  data: BoardUpdateManyDataInput;
}

export interface BoardCreateWithoutColumnsInput {
  name: String;
  user: UserCreateOneWithoutBoardsInput;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  username?: String;
  password?: String;
  boards?: BoardUpdateManyWithoutUserInput;
}

export interface CardUpdateInput {
  name?: String;
  column?: ColumnUpdateOneRequiredWithoutCardsInput;
  color?: String;
}

export interface ColumnCreateManyWithoutBoardInput {
  create?: ColumnCreateWithoutBoardInput[] | ColumnCreateWithoutBoardInput;
  connect?: ColumnWhereUniqueInput[] | ColumnWhereUniqueInput;
}

export interface BoardUpdateWithoutColumnsDataInput {
  name?: String;
  user?: UserUpdateOneRequiredWithoutBoardsInput;
}

export interface BoardUpdateOneRequiredWithoutColumnsInput {
  create?: BoardCreateWithoutColumnsInput;
  update?: BoardUpdateWithoutColumnsDataInput;
  upsert?: BoardUpsertWithoutColumnsInput;
  connect?: BoardWhereUniqueInput;
}

export interface ColumnUpdateWithoutCardsDataInput {
  name?: String;
  board?: BoardUpdateOneRequiredWithoutColumnsInput;
}

export interface ColumnUpdateOneRequiredWithoutCardsInput {
  create?: ColumnCreateWithoutCardsInput;
  update?: ColumnUpdateWithoutCardsDataInput;
  upsert?: ColumnUpsertWithoutCardsInput;
  connect?: ColumnWhereUniqueInput;
}

export interface UserCreateOneWithoutBoardsInput {
  create?: UserCreateWithoutBoardsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  firstName: String;
  lastName: String;
  email: String;
  username: String;
  password: String;
  boards?: BoardCreateManyWithoutUserInput;
}

export interface BoardUpdateWithoutUserDataInput {
  name?: String;
  columns?: ColumnUpdateManyWithoutBoardInput;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CardWhereInput;
  AND?: CardSubscriptionWhereInput[] | CardSubscriptionWhereInput;
  OR?: CardSubscriptionWhereInput[] | CardSubscriptionWhereInput;
  NOT?: CardSubscriptionWhereInput[] | CardSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  username: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface ColumnSubscriptionPayload {
  mutation: MutationType;
  node: Column;
  updatedFields: String[];
  previousValues: ColumnPreviousValues;
}

export interface ColumnSubscriptionPayloadPromise
  extends Promise<ColumnSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ColumnPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ColumnPreviousValuesPromise>() => T;
}

export interface ColumnSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ColumnSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ColumnSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ColumnPreviousValuesSubscription>() => T;
}

export interface AggregateBoard {
  count: Int;
}

export interface AggregateBoardPromise
  extends Promise<AggregateBoard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BoardEdge {
  node: Board;
  cursor: String;
}

export interface BoardEdgePromise extends Promise<BoardEdge>, Fragmentable {
  node: <T = BoardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdge>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ColumnPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ColumnPreviousValuesPromise
  extends Promise<ColumnPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ColumnPreviousValuesSubscription
  extends Promise<AsyncIterator<ColumnPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Card {
  id: ID_Output;
  name: String;
  color?: String;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  column: <T = ColumnPromise>() => T;
  color: () => Promise<String>;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  column: <T = ColumnSubscription>() => T;
  color: () => Promise<AsyncIterator<String>>;
}

export interface Board {
  id: ID_Output;
  name: String;
}

export interface BoardPromise extends Promise<Board>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  columns: <T = FragmentableArray<Column>>(
    args?: {
      where?: ColumnWhereInput;
      orderBy?: ColumnOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = UserPromise>() => T;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<Board>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  columns: <T = Promise<AsyncIterator<ColumnSubscription>>>(
    args?: {
      where?: ColumnWhereInput;
      orderBy?: ColumnOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = UserSubscription>() => T;
}

export interface ColumnEdge {
  node: Column;
  cursor: String;
}

export interface ColumnEdgePromise extends Promise<ColumnEdge>, Fragmentable {
  node: <T = ColumnPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ColumnEdgeSubscription
  extends Promise<AsyncIterator<ColumnEdge>>,
    Fragmentable {
  node: <T = ColumnSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoardSubscriptionPayload {
  mutation: MutationType;
  node: Board;
  updatedFields: String[];
  previousValues: BoardPreviousValues;
}

export interface BoardSubscriptionPayloadPromise
  extends Promise<BoardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValuesPromise>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BoardPreviousValues {
  id: ID_Output;
  name: String;
}

export interface BoardPreviousValuesPromise
  extends Promise<BoardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Column {
  id: ID_Output;
  name: String;
}

export interface ColumnPromise extends Promise<Column>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  board: <T = BoardPromise>() => T;
  cards: <T = FragmentableArray<Card>>(
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ColumnSubscription
  extends Promise<AsyncIterator<Column>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  board: <T = BoardSubscription>() => T;
  cards: <T = Promise<AsyncIterator<CardSubscription>>>(
    args?: {
      where?: CardWhereInput;
      orderBy?: CardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  username: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  boards: <T = FragmentableArray<Board>>(
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(
    args?: {
      where?: BoardWhereInput;
      orderBy?: BoardOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CardPreviousValues {
  id: ID_Output;
  name: String;
  color?: String;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface BoardConnection {
  pageInfo: PageInfo;
  edges: BoardEdge[];
}

export interface BoardConnectionPromise
  extends Promise<BoardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoardEdge>>() => T;
  aggregate: <T = AggregateBoardPromise>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface AggregateColumn {
  count: Int;
}

export interface AggregateColumnPromise
  extends Promise<AggregateColumn>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateColumnSubscription
  extends Promise<AsyncIterator<AggregateColumn>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ColumnConnection {
  pageInfo: PageInfo;
  edges: ColumnEdge[];
}

export interface ColumnConnectionPromise
  extends Promise<ColumnConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ColumnEdge>>() => T;
  aggregate: <T = AggregateColumnPromise>() => T;
}

export interface ColumnConnectionSubscription
  extends Promise<AsyncIterator<ColumnConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ColumnEdgeSubscription>>>() => T;
  aggregate: <T = AggregateColumnSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Board",
    embedded: false
  },
  {
    name: "Column",
    embedded: false
  },
  {
    name: "Card",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
